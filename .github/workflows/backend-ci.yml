name: CI-backend

on:
  pull_request:
    branches: [develop]
    paths:
      - backend/**

env:
  node_version: 18
  base_folder: backend
  aws_profile_name: grocery-list-testing

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js v${{ env.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.base_folder }}/package-lock.json

      - name: Install NPM dependencies
        run: |
          if [ ! -d .backend/node_modules ]; then
            cd ${{ env.base_folder }}
            npm i
          fi

      - name: Run lint
        run: cd ${{ env.base_folder }} && npm run lint

  Unit-Test:
    needs: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js v${{ env.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.base_folder }}/package-lock.json

      - name: Install NPM dependencies
        run: |
          if [ ! -d ./node_modules ]; then
            cd ${{ env.base_folder }}
            npm i
          fi

      - name: Run unit tests
        run: cd ${{ env.base_folder }} && npm run test:unit

  End-to-End-Test:
    needs: Unit-Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js v${{ env.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.base_folder }}/package-lock.json

      - name: Install NPM dependencies
        run: |
          if [ ! -d ./node_modules ]; then
            cd ${{ env.base_folder }}
            npm i
          fi

      - name: Setup AWS Credentials
        run: |
          npx serverless config credentials \
          --provider aws \
          --key ${{ secrets.AWS_ACCESS_KEY_ID }} \
          --secret $AWS_SECRET_ACCESS_KEY \
          --profile ${{ env.aws_profile_name }} \
          --overwrite

      - name: Deploy to temporary environment
        run: |
          echo "STAGE_NAME=pr-${{github.event.number}}" >> "$GITHUB_ENV"
          cd ${{ env.base_folder }} && npm run deploy:pr -- --aws-profile ${{ env.aws_profile_name }} --stage=${{ env.STAGE_NAME }}

      - name: Run end to end test
        run: cd ${{ env.base_folder }} && env STAGE_NAME=${{ env.STAGE_NAME }} npm run test:e2d
